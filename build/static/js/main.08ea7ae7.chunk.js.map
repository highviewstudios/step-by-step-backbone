{"version":3,"sources":["context/userContext.js","pages/auth.jsx","ServerPath.jsx","pages/signin.jsx","pages/home.jsx","pages/register.jsx","context/adminContext.js","pages/Administrator/auth.js","pages/Administrator/signin.jsx","pages/Administrator/home.jsx","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","UserContextProvider","props","useState","name","email","user","setUser","Provider","value","updateUser","field","prevValue","children","Auth","history","useHistory","useContext","useEffect","Axios","get","withCredentials","then","res","console","log","data","auth","displayName","push","catch","err","hostPath","BuildHostPath","host","window","location","hostname","protocol","SignIn","message","setmessage","ServerPath","id","type","onClick","event","preventDefault","document","getElementById","password","axios","info","href","to","Home","Register","setMessage","registed","setRegister","title","className","Container","Jumbotron","Button","variant","Form","action","method","Control","size","placeholder","required","url","userError","AdminContext","AdminContextProvider","granted","prevVal","access","App","path","exact","component","AdminAuth","AdminSignIn","AdminHome","Boolean","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.08ea7ae7.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const UserContext = createContext();\n\nfunction UserContextProvider(props) {\n\n    const [user, setUser] = useState({\n        name: '',\n        email: ''\n    });\n\n    function updateUser(field, value) {\n        setUser((prevValue) => {\n            return {...prevValue, [field]: value}\n        })\n    }\n\n    return (\n        <UserContext.Provider value={{user, updateUser}}>\n            {props.children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserContextProvider;","import React, { useEffect, useContext } from \"react\";\nimport Axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { UserContext } from \"../context/userContext\";\n\nfunction Auth() {\n\n    const history = useHistory();\n    const { updateUser } = useContext(UserContext)\n\n    useEffect(() => {\n        onOpen();\n    },[])\n\n    function onOpen() {\n        Axios.get(\"/auth\", {withCredentials: true })\n        .then(res => {\n            console.log(res.data);\n            const isAuth = res.data.auth;\n\n            if(isAuth) {\n            \n                updateUser(\"name\", res.data.user.displayName);\n                history.push('/home');\n            } else {\n                history.push('/signin');\n            }\n        })\n        .catch(err => {\n            console.log(\"E \" +err);\n        })\n    }\n\n    return (\n        <div>\n            <h1>Auth</h1>\n        </div>\n    )\n}\n\nexport default Auth;","import React from \"react\";\n\nlet hostPath = \"\";\n\nfunction BuildHostPath() {\n    \n    const host = window.location.hostname;\n    const protocol = window.location.protocol;\n\n    if(host === \"localhost\") {\n        hostPath = protocol + \"//\" + host + \":8080\";\n        \n    } else {\n        hostPath = protocol +\"//\" + host;\n    }  \n}\n\nexport default BuildHostPath;\nexport { hostPath };","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useHistory, Link } from 'react-router-dom';\nimport ServerPath, { hostPath } from \"../ServerPath\";\n\nfunction SignIn() {\n\n    const history = useHistory();\n    const [message, setmessage] = useState('');\n\n    useEffect(() => {\n        ServerPath();\n    },[]);\n\n    function handleClick(event) {\n        event.preventDefault();\n        const email = document.getElementById(\"txtEmail\").value;\n        const password = document.getElementById(\"txtPassword\").value;\n\n        axios.get(\"/login?email=\" + email + \"&password=\" + password)\n        .then(res => {\n            const message = res.data.message;\n            if(message === \"Logged in successful\") {\n                history.push('/');\n            } else {\n                setmessage(res.data.info);\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    return (\n        <div>\n        <h1>Sign In</h1> <br /> <br />\n        <form>\n            <label id=\"lblEmail\">Email:</label>\n            <input id=\"txtEmail\" name=\"email\" type=\"text\"></input><br />\n            <label id=\"lblPassword\">Password</label>\n            <input id=\"txtPassword\" name=\"password\" type=\"password\"></input>\n            <button onClick={handleClick}>LogIn</button>\n            <p>{message}</p>\n        </form>\n        <a href= {hostPath + \"/auth/google\"}>Sign In With Google</a>\n        <Link to=\"/register\">\n          <p>Register</p>\n        </Link>\n        </div>\n    )\n}\n\nexport default SignIn;","import React, { useContext, useEffect } from 'react';\nimport { UserContext } from '../context/userContext';\nimport ServerPath, { hostPath } from \"../ServerPath\";\n\nfunction Home() {\n\n    useEffect(() => {\n        ServerPath();\n    },[])\n    \n    const { user } = useContext(UserContext)\n\n    return (\n        <div>\n            <h1>Home Page</h1>\n            <h2>{user.name}</h2>\n            <a href= {hostPath + \"/logout\"}>Sign Out</a>\n        </div>\n    )\n}\n\nexport default Home;\n","import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\n\n//Styles\nimport Button  from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction Register() {\n\n    const history = useHistory();\n\n    const [message, setMessage] = useState('');\n    const [registed, setRegister] = useState(false)\n\n\n    useEffect(() => {\n        document.title = \"Register\"\n    },[]); \n\n    function handleClick(event) {\n        event.preventDefault();\n        setMessage('');\n        const name = document.getElementById(\"name\").value;\n        const email = document.getElementById(\"email\").value;\n        const password = document.getElementById(\"password\").value;\n        const confirmpassword = document.getElementById(\"confirmpassword\").value;\n        \n        const url = \"/register/\"+ name +\"/\"+ email +\"/\"+ password +\"/\"+ confirmpassword;\n        axios.get(url)\n        .then(res => {\n            if(res.data.message === \"User registered successfully\") {\n                setRegister(true);\n            } else {\n                if(res.data.userError === \"Yes\") {\n                    setMessage(res.data.message);\n                }\n        }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    function handleLogin() {\n        setRegister(false);\n        history.push('/signin')\n    }\n\n    \n    return (\n        <div className=\"body\">\n        <Container className=\"p-3\">\n            <Jumbotron className=\"back-color\">\n            <div className=\"header\">\n                <h1>Register</h1>\n                {registed ? (\n                    <div>\n                    <h2> You have successfully been registered</h2><br />\n                    <p>Please log in</p>\n                    <Button type=\"submit\" onClick={handleLogin} variant=\"primary\">Login</Button>\n                    </div>\n                ) : (\n                    <Form action=\"/form\" method=\"POST\">\n                    <Form.Control id=\"name\" size=\"sm\" type=\"text\" placeholder=\"Name\" required/>\n                    <br />\n                    <Form.Control id=\"email\" size=\"sm\" type=\"email\" placeholder=\"Email\" required/>\n                    <br />\n                    <Form.Control id=\"password\" size=\"sm\" type=\"password\" placeholder=\"Password\" required/>\n                    <br />\n                    <Form.Control id=\"confirmpassword\" size=\"sm\" type=\"password\" placeholder=\"Confirm Password\" required />\n                    <br />\n                    <p>{message}</p>\n                    <Button type=\"submit\" onClick={handleClick} variant=\"primary\">Register</Button>\n                </Form> \n                )}\n            </div>\n            </Jumbotron>\n        </Container>\n        </div>\n    )\n}\n\nexport default Register;","import React, { createContext, useState } from 'react';\n\nexport const AdminContext = createContext();\n\nfunction AdminContextProvider(props) {\n\n    const [user, setUser] = useState({\n        name: '',\n        granted: ''\n    })\n\n    function updateUser(field, value) {\n        setUser((prevVal) => {\n            return {...prevVal, [field]: value}\n        })\n    }\n\n    return (\n        <AdminContext.Provider value={{user, updateUser}}>\n            {props.children}\n        </AdminContext.Provider>\n    );\n}\n\nexport default AdminContextProvider;","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AdminContext } from '../../context/adminContext';\nimport Axios from 'axios';\n\nfunction Auth() {\n    \n    const history = useHistory();\n\n    const { updateUser } = useContext(AdminContext);\n\n    useEffect(() => {\n        onOpen();\n    }, []);\n\n    function onOpen() {\n        \n        Axios.get(\"/administrator/auth\")\n        .then(res => {\n            const data = res.data;\n            if(data.auth) {\n                updateUser(\"granted\", data.access);\n                if(data.access == \"granted\") {\n                    history.push('/administrator/home');\n                } else {\n                    history.push('/administrator/signin');\n                }\n            } else {\n                history.push('/administrator/signin');\n            }\n        })  \n        .catch(err => {\n            console.log(err);\n        })\n    }\n    \n    \n    return (\n        <div>\n            <h1> Admin Auth</h1>\n        </div>\n    )\n}\n\nexport default Auth;","import React, { useContext } from 'react';\nimport { AdminContext } from '../../context/adminContext';\n\nfunction SignIn() {\n\n    const { user } = useContext(AdminContext);\n\n    return (\n        <div>\n        <h1>Administrator Sign In</h1>\n        {user.granted == \"denied\" ? (\n            <div>\n            <h1>Access Denied</h1>\n            <a href=\"http://localhost:8080/administrator/logout\">Log Out</a>\n            </div>\n        ):(\n            <a href=\"http://localhost:8080/auth/github\">Sign In With GitHub</a>\n            )}\n        </div>\n    )\n}\n\nexport default SignIn;","import React from 'react';\n\nfunction Home() {\n    return (\n        <div>\n            <h1>Administrator Home</h1>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./pages/partials/app.css\";\n\nimport Auth from \"./pages/auth\";\nimport SignIn from \"./pages/signin\";\nimport Home from \"./pages/home\";\nimport Register from \"./pages/register\";\n\nimport AdminAuth from \"./pages/Administrator/auth\";\nimport AdminSignIn from \"./pages/Administrator/signin\"\nimport AdminHome from \"./pages/Administrator/home\";\n\nimport UserContextProvider from './context/userContext';\nimport AdminContextProvider from './context/adminContext';\n\n\nfunction App() {\n  return (\n    <UserContextProvider>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Auth} />\n          <Route path=\"/signin\" component={SignIn} />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/register\" component={Register} />\n          <AdminContextProvider>\n          <Route path=\"/administrator\" exact component={AdminAuth} />\n          <Route path=\"/administrator/signin\" component={AdminSignIn} />\n          <Route path=\"/administrator/home\" component={AdminHome} />\n          </AdminContextProvider>\n        </Switch>\n      </Router>\n    </UserContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}