{"version":3,"sources":["context/userContext.js","pages/auth.jsx","pages/signin.jsx","pages/home.jsx","pages/Administrator/auth.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","UserContextProvider","props","useState","name","email","user","setUser","Provider","value","updateUser","field","prevValue","children","Auth","history","useHistory","useContext","useEffect","Axios","get","withCredentials","then","res","console","log","data","auth","displayName","push","catch","err","SignIn","message","setmessage","id","type","onClick","event","preventDefault","document","getElementById","password","axios","info","href","to","Home","App","path","exact","component","AdminAuth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"wPAEaA,EAAcC,0BAsBZC,MApBf,SAA6BC,GAAQ,IAAD,EAERC,mBAAS,CAC7BC,KAAM,GACNC,MAAO,KAJqB,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAahC,OACI,kBAACR,EAAYS,SAAb,CAAsBC,MAAO,CAACH,OAAMI,WAPxC,SAAoBC,EAAOF,GACvBF,GAAQ,SAACK,GACL,OAAO,2BAAIA,GAAX,kBAAuBD,EAAQF,UAM9BP,EAAMW,W,iBCqBJC,MAnCf,WAEI,IAAMC,EAAUC,cACRN,EAAeO,qBAAWlB,GAA1BW,WAyBR,OAvBAQ,qBAAU,WAKNC,IAAMC,IAAI,QAAS,CAACC,iBAAiB,IACpCC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MACDH,EAAIG,KAAKC,MAIpBjB,EAAW,OAAQa,EAAIG,KAAKpB,KAAKsB,aACjCb,EAAQc,KAAK,UAEbd,EAAQc,KAAK,cAGpBC,OAAM,SAAAC,GACHP,QAAQC,IAAI,KAAMM,QAjBxB,IAsBE,6BACI,sCCeGC,MA9Cf,WAEI,IAAMjB,EAAUC,cAFF,EAGgBb,mBAAS,IAHzB,mBAGP8B,EAHO,KAGEC,EAHF,KA2Bd,OAtBAhB,qBAAU,cACR,IAsBE,6BACA,uCADA,IACiB,6BADjB,IACwB,6BACxB,8BACI,2BAAOiB,GAAG,YAAV,UACA,2BAAOA,GAAG,WAAW/B,KAAK,QAAQgC,KAAK,SAAe,6BACtD,2BAAOD,GAAG,eAAV,YACA,2BAAOA,GAAG,cAAc/B,KAAK,WAAWgC,KAAK,aAC7C,4BAAQC,QA3BhB,SAAqBC,GACjBA,EAAMC,iBACN,IAAMlC,EAAQmC,SAASC,eAAe,YAAYhC,MAC5CiC,EAAWF,SAASC,eAAe,eAAehC,MAExDkC,IAAMvB,IAAI,gBAAkBf,EAAQ,aAAeqC,GAClDpB,MAAK,SAAAC,GAEa,yBADCA,EAAIG,KAAKO,QAErBlB,EAAQc,KAAK,KAEbK,EAAWX,EAAIG,KAAKkB,SAG3Bd,OAAM,SAAAC,GACHP,QAAQC,IAAIM,QAYZ,SACA,2BAAIE,IAER,uBAAGY,KAAK,qCAAR,uBACA,kBAAC,IAAD,CAAMC,GAAG,aACP,0CC5BKC,MAbf,WAAiB,IAELzC,EAASW,qBAAWlB,GAApBO,KAER,OACI,6BACI,yCACA,4BAAKA,EAAKF,MACV,uBAAGyC,KAAK,gCAAR,cCDG/B,MARf,WACI,OACI,6BACI,6CCsBGkC,MAhBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,UAAUE,UAAWnB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,QAAQE,UAAWJ,IAE/B,kBAAC,IAAD,CAAOE,KAAK,iBAAiBE,UAAWC,QCR9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASC,eAAe,SDyHpB,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACL1C,QAAQ0C,MAAMA,EAAMjC,c","file":"static/js/main.5800cdce.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const UserContext = createContext();\n\nfunction UserContextProvider(props) {\n\n    const [user, setUser] = useState({\n        name: '',\n        email: ''\n    });\n\n    function updateUser(field, value) {\n        setUser((prevValue) => {\n            return {...prevValue, [field]: value}\n        })\n    }\n\n    return (\n        <UserContext.Provider value={{user, updateUser}}>\n            {props.children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserContextProvider;","import React, { useEffect, useContext } from \"react\";\nimport Axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { UserContext } from \"../context/userContext\";\n\nfunction Auth() {\n\n    const history = useHistory();\n    const { updateUser } = useContext(UserContext)\n\n    useEffect(() => {\n        onOpen();\n    },[])\n\n    function onOpen() {\n        Axios.get(\"/auth\", {withCredentials: true })\n        .then(res => {\n            console.log(res.data);\n            const isAuth = res.data.auth;\n\n            if(isAuth) {\n            \n                updateUser(\"name\", res.data.user.displayName);\n                history.push('/home');\n            } else {\n                history.push('/signin');\n            }\n        })\n        .catch(err => {\n            console.log(\"E \" +err);\n        })\n    }\n\n    return (\n        <div>\n            <h1>Auth</h1>\n        </div>\n    )\n}\n\nexport default Auth;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useHistory, Link } from 'react-router-dom';\n\nfunction SignIn() {\n\n    const history = useHistory();\n    const [message, setmessage] = useState('');\n\n    useEffect(() => {\n    },[]);\n\n    function handleClick(event) {\n        event.preventDefault();\n        const email = document.getElementById(\"txtEmail\").value;\n        const password = document.getElementById(\"txtPassword\").value;\n\n        axios.get(\"/login?email=\" + email + \"&password=\" + password)\n        .then(res => {\n            const message = res.data.message;\n            if(message === \"Logged in successful\") {\n                history.push('/');\n            } else {\n                setmessage(res.data.info);\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    return (\n        <div>\n        <h1>Sign In</h1> <br /> <br />\n        <form>\n            <label id=\"lblEmail\">Email:</label>\n            <input id=\"txtEmail\" name=\"email\" type=\"text\"></input><br />\n            <label id=\"lblPassword\">Password</label>\n            <input id=\"txtPassword\" name=\"password\" type=\"password\"></input>\n            <button onClick={handleClick}>LogIn</button>\n            <p>{message}</p>\n        </form>\n        <a href=\"http://localhost:8080/auth/google\">Sign In With Google</a>\n        <Link to=\"/register\">\n          <p>Register</p>\n        </Link>\n        </div>\n    )\n}\n\nexport default SignIn;","import React, { useContext } from 'react';\nimport { UserContext } from '../context/userContext';\n\nfunction Home() {\n    \n    const { user } = useContext(UserContext)\n\n    return (\n        <div>\n            <h1>Home Page</h1>\n            <h2>{user.name}</h2>\n            <a href=\"http://localhost:8080/logout\">Sign Out</a>\n        </div>\n    )\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Auth() {\n    return (\n        <div>\n            <h1> Admin Auth</h1>\n        </div>\n    )\n}\n\nexport default Auth;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport UserContextProvider from './context/userContext';\n\nimport Auth from \"./pages/auth\";\nimport SignIn from \"./pages/signin\";\nimport Home from \"./pages/home\"\n\nimport AdminAuth from \"./pages/Administrator/auth\";\n\n\nfunction App() {\n  return (\n    <UserContextProvider>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Auth} />\n          <Route path=\"/signin\" component={SignIn} />\n          <Route path=\"/home\" component={Home} />\n          \n          <Route path=\"/administrator\" component={AdminAuth} />\n        </Switch>\n      </Router>\n    </UserContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}